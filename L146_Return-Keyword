The Return Keyword.
> Often we want a function to send back an output value.
input -> Function -> Output

> function square(x) {

    console.log(x*x);

}

<- undefined

> 
square(4);
  16

<- undefined


> "4 squared is: " + square(4);
  16

<- "4 squared is: undefined"


> function square(x) {

    return x * x;
 
}
<- 
undefined

> 
square(4);
<- 16


> console.log(4);
  4
<- undefined


> "4 squared is: " + square(4);

<- "4 squared is: 16"


> var result = square(104);

<- undefined


> result;
<- 
10816

** Every function returns a value, and if we don't explicitly assign a return, it will just return '<- undefined'

19_Oct_2019, 6.39PM

The Return Keyword:
> we use the 'return' keyword to output a value from a function

//this function capitalizes the first char in a string:

function capitalize(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}

var city = "paris";		 //"paris"
var capital = capitalize(city);  //"Paris"

//we can capture the returned value in a variable

> The 'return' keyword stops execution of a function
function capitalize(str) {
    if(typeof str === "number") {
       return "that's not a string!"
     }
     return str.charAt(0).toUpperCase() + str.slice(1);
}

var city = "paris";              //"paris"
var capital = capitalize(city);  //"Paris

var num = 37;
var capital = capitalize(num); //"that's not a string!"

> Another Syntax
> Function Declaration vs. Function Expression
//function declaration
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

//function expression
var capitalize = function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

